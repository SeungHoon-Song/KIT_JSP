<?xml version="1.0" encoding="UTF-8"?>      
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="User">
   <insert id="Join" parameterType="userVO">
		INSERT INTO TABLE_USER 
		VALUES( 
			#{user_Id}, #{user_Pw}, #{user_Name}, #{user_Email}, #{user_Email_Hash}, 
			#{user_Zipcode}, #{user_Address}, #{user_Address_DETAIL}, #{user_Address_Etc}, #{user_Point} )
   </insert>
   <select id="checkId" parameterType="string" resultType="_int">
      SELECT COUNT(*) FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="checkEmail" parameterType="string" resultType="_int">
      SELECT USER_EMAIL FROM TABLE_USER WHERE USER_EMAIL = #{new_email}
   </select>
   
   <select id="checkEmailHash" parameterType="string" resultType="_int">
      SELECT COUNT(*) FROM TABLE_USER WHERE USER_EMAIL = #{user_Email}
   </select>
 
    <select id="findId" parameterType="map" resultType="string">
       SELECT USER_ID FROM TABLE_USER WHERE USER_NAME = #{name} AND USER_EMAIL = #{email}
    </select>
    
    <update id="findPw" parameterType="map">
      UPDATE TABLE_USER SET USER_PW = #{pw} WHERE USER_ID = #{id} AND USER_EMAIL = #{email2}
    </update>
	
	<select id="findPoint" parameterType="string" resultType="_int">
		SELECT USER_POINT FROM TABLE_USER WHERE USER_ID = #{id}
	</select>
	
	<select id="Login" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM TABLE_USER 
		WHERE USER_ID = #{id} AND USER_PW = #{pw}
	</select>
	 <select id="getFindId" parameterType="string" resultType="string">
      SELECT USER_ID FROM TABLE_USER WHERE USER_ID = #{id}
   </select>
  <!-- 유저 MYPAGE INFO -->
   <select id="findName" parameterType="string" resultType="string">
      SELECT USER_NAME FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="findEmail" parameterType="string" resultType="string">
      SELECT USER_EMAIL FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>

   <select id="findZipcode" parameterType="string" resultType="string">
   	SELECT USER_ZIPCODE FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="findAddress" parameterType="string" resultType="string">
   	SELECT USER_ADDRESS FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="findAddressEtc" parameterType="string" resultType="string">
   	SELECT USER_ADDRESS_ETC FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="findAddressDETAIL" parameterType="string" resultType="string">
   	SELECT USER_ADDRESS_DETAIL FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   <select id="findAddressAll" parameterType="string" resultType="string">
   	SELECT USER_ZIPCODE, USER_ADDRESS, USER_ADDRESS_DETAIL, USER_ADDRESS_ETC FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   
   
   
   <!-- 유저 이름 변경 -->
   <update id="modifyName" parameterType="map">
      UPDATE TABLE_USER SET USER_NAME = #{user_Name} WHERE USER_ID = #{user_Id}
   </update>
   
   <!-- 주소 변경 -->
   <update id="modifyAddress" parameterType="userVO">
   	UPDATE TABLE_USER SET USER_ZIPCODE = #{user_Zipcode}, 
   	USER_ADDRESS = #{user_Address}, 
   	USER_ADDRESS_DETAIL = #{user_Address_DETAIL}, 
   	USER_ADDRESS_ETC = #{user_Address_Etc} WHERE USER_ID = #{user_Id}
   </update>

	<!-- 비밀번호 변경 -->
   <select id="currentPw" parameterType="string" resultType="string">
   	SELECT USER_PW FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </select>
   <update id="modifyPw" parameterType="map">
   	UPDATE TABLE_USER SET USER_PW = #{user_Pw} WHERE USER_ID = #{user_Id}
   </update>
   
    <!-- 이메일 변경 -->
   <update id="modifyEmail" parameterType="map">
      UPDATE TABLE_USER SET USER_EMAIL = #{new_Email} 
      WHERE USER_ID = #{user_Id} AND USER_EMAIL = #{user_Email}
   </update>
   
   <!-- 회원 탈퇴 -->
   <delete id="deleteAccount" parameterType="string">
   		DELETE FROM TABLE_USER WHERE USER_ID = #{user_Id}
   </delete>
   
   <!-- 내가 쓴 글 -->
	<select id="listAll" parameterType="map" resultType="freeBoardVO">
		SELECT * FROM(SELECT ROWNUM AS RN, D.* FROM(
			SELECT * FROM
			(
			SELECT BOARD_NUM, BOARD_CATEGORY, BOARD_TITLE, BOARD_DATE FROM TABLE_BOARD_FREETALK A WHERE BOARD_ID = #{board_Id} 
			UNION ALL
			SELECT BOARD_NUM, BOARD_CATEGORY, BOARD_TITLE, BOARD_DATE FROM TABLE_BOARD_EVENT B WHERE BOARD_ID = #{board_Id} 
			UNION ALL
			SELECT BOARD_NUM, BOARD_CATEGORY, BOARD_TITLE, BOARD_DATE FROM TABLE_BOARD_REVIEW C WHERE BOARD_ID = #{board_Id} 
			) 
			ORDER BY BOARD_DATE DESC
			)D)WHERE RN BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="getBoardCnt" parameterType="string" resultType="_int">
		SELECT (SELECT COUNT(*) FROM TABLE_BOARD_FREETALK WHERE BOARD_ID = #{board_Id}) 
	+ (SELECT COUNT(*) FROM TABLE_BOARD_EVENT WHERE BOARD_ID = #{board_Id}) 
	+ (SELECT COUNT(*) FROM TABLE_BOARD_REVIEW WHERE BOARD_ID = #{board_Id}) FROM DUAL
	</select>

   <!-- 내가 쓴 댓글 -->
   <select id="getReplyList" parameterType="map" resultType="freeReplyVO">
		SELECT * FROM(SELECT ROWNUM AS RN, D.* FROM(
			SELECT * FROM
			(
			SELECT BOARD_NUM, BOARD_CATEGORY, REPLY_CONTENT, REPLY_DATE FROM TABLE_REPLY_FREETALK A WHERE USER_ID = #{user_Id}  
			UNION ALL
			SELECT BOARD_NUM, BOARD_CATEGORY, REPLY_CONTENT, REPLY_DATE FROM TABLE_REPLY_EVENT B WHERE USER_ID = #{user_Id}  
			UNION ALL
			SELECT BOARD_NUM, BOARD_CATEGORY, REPLY_CONTENT, REPLY_DATE FROM TABLE_REPLY_REVIEW C WHERE USER_ID = #{user_Id}  
			) 
			ORDER BY REPLY_DATE DESC
		)D)WHERE RN BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="getReplyCnt" parameterType="string" resultType="_int">
		SELECT (SELECT COUNT(*) FROM TABLE_REPLY_FREETALK WHERE USER_ID = #{user_Id}) 
	+ (SELECT COUNT(*) FROM TABLE_REPLY_EVENT WHERE USER_ID = #{user_Id}) 
	+ (SELECT COUNT(*) FROM TABLE_REPLY_REVIEW WHERE USER_ID = #{user_Id}) FROM DUAL
	</select>
</mapper>